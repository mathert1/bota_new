using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
//using System.Windows.Shapes;
using System.Collections.ObjectModel;
using MSCommon;

namespace WpfTest
{
	/// <summary>
	/// Interaction logic for EditCharacterWindow.xaml
	/// </summary>
	public partial class EditCharacterWindow : Window
	{
		ObservableCollection<UpgradeObject> AvatarHeadList = new ObservableCollection<UpgradeObject>();
		ObservableCollection<UpgradeObject> AvatarChestList = new ObservableCollection<UpgradeObject>();
		ObservableCollection<UpgradeObject> AvatarShoulderList = new ObservableCollection<UpgradeObject>();
		ObservableCollection<UpgradeObject> SkinList = new ObservableCollection<UpgradeObject>();
		ObservableCollection<CharTank> myTankList = new ObservableCollection<CharTank>();

		CharacterControl.Game1 m_game;
		private ScreenManager screenMan;		

		public EditCharacterWindow(ScreenManager SM, double left, double top)//, int top, int left)
		{
			InitializeComponent();
			screenMan = SM;

			this.WindowStartupLocation = WindowStartupLocation.Manual;
			this.Left = left;
			this.Top = top;
			ServerConnection.RequestMyTanks();
			ServerConnection.RequestMyAvatar();
		}

		//private delegate void TankListSetter(List<CharTank> tankList);
		//public void SetUpTankList(List<CharTank> tankList)
		//{
		//    if (this.tankListBox.Dispatcher.CheckAccess())
		//    {
		//        myTankList.Clear();
		//        foreach (CharTank CT in tankList)
		//        {
		//            CT.Name = TextFileHelper.GetObjNameByID(CT.ID, "Tanks");
		//            myTankList.Add(CT);
		//        }

		//        tankListBox.Items.Clear();
		//        tankListBox.ItemsSource = myTankList;
		//    }
		//    else
		//    {
		//        this.tankListBox.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
		//            new TankListSetter(this.SetUpTankList), tankList);
		//    }
		//}

		private delegate void SetCharacterInfoer();
		public void SetCharacterInfo()
		{
			if (this.GoldTxtBlk.Dispatcher.CheckAccess())
			{
				//Checks if there are temp variables for all avatar/tank/skins and sends the correct item to 'Game1'
				int t; int s; int avh; int avs; int avc;

				if (Variables.TempTank != 0)
					t = Variables.TempTank;
				else
					t = Variables.player.Tank;
				if (Variables.TempSkin != 0)
					s = Variables.TempSkin;
				else
					s = Variables.player.Skin;
				if (Variables.TempAvaHead > -1)
					avh = Variables.TempAvaHead;
				else
					avh = Variables.player.AvaHead;
				if (Variables.TempAvaShoulder > -1)
					avs = Variables.TempAvaShoulder;
				else
					avs = Variables.player.AvaShoulder;
				if (Variables.TempAvaChest > -1)
					avc = Variables.TempAvaChest;
				else
					avc = Variables.player.AvaChest;
				UpgradeObject tank; UpgradeObject skin; UpgradeObject avaHead; UpgradeObject avaShoulder; UpgradeObject avaChest;
				string stank; string sskin; string savaHead; string savaShoulder; string savaChest;

				tank = TextFileHelper.GetUpgradeObjectFromTextFile(t, "Tanks");
				skin = TextFileHelper.GetUpgradeObjectFromTextFile(s, "Skins");
				avaHead = TextFileHelper.GetUpgradeObjectFromTextFile(avh, "AvatarHead");
				avaShoulder = TextFileHelper.GetUpgradeObjectFromTextFile(avs, "AvatarShoulder");
				avaChest = TextFileHelper.GetUpgradeObjectFromTextFile(avc, "AvatarChest");
								
				GoldTxtBlk.Text = Variables.player.Gold.ToString();
				AttackTxtBlk.Text = (tank.Attack + skin.Attack + avaHead.Attack + avaShoulder.Attack + avaChest.Attack).ToString();
				DefenseTxtBlk.Text = (tank.Defense + skin.Defense + avaHead.Defense + avaShoulder.Defense + avaChest.Defense).ToString();
				HealthTxtBlk.Text = (tank.Health + skin.Health + avaHead.Health + avaShoulder.Health + avaChest.Health).ToString();
				MoveTxtBlk.Text = (tank.Move + skin.Move + avaHead.Move + avaShoulder.Move + avaChest.Move).ToString();
				ShieldTxtBlk.Text = (tank.Shield + skin.Shield + avaHead.Shield + avaShoulder.Shield + avaChest.Shield).ToString();
				PopularityTxtBlk.Text = (tank.Popularity + skin.Popularity + avaHead.Popularity + avaShoulder.Popularity + avaChest.Popularity).ToString();

				stank = tank.FilePath.Replace(".png", "");
				sskin = skin.FilePath.Replace(".png", "");
				savaHead = avaHead.FilePath.Replace(".png", "");
				savaShoulder = avaShoulder.FilePath.Replace(".png", "");
				savaChest = avaChest.FilePath.Replace(".png", "");

				if (m_game != null)
					m_game.Dispose();
				m_game = new CharacterControl.Game1(stank, sskin, savaHead, savaShoulder, savaChest, xnaCharControl.Handle);
			}
			else
			{
				this.GoldTxtBlk.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
						new SetCharacterInfoer(this.SetCharacterInfo));
			}
		}

		private delegate void AvaListSetter(List<int> avaList);
		public void SetUpAvaList(List<int> avaList)
		{
			if (this.avatarTabItem.Dispatcher.CheckAccess())
			{
				AvatarHeadList.Clear();
				AvatarShoulderList.Clear();
				AvatarChestList.Clear();
				SkinList.Clear();
				int count = avaList.Count();
				for (int i = 0; i < count; i += 2)
				{
					int avaID = avaList[i];
					int type = avaList[i+1];
					if (type == 1)
					{
                        UpgradeObject uO = TextFileHelper.GetUpgradeObjectFromTextFile(avaID, "AvatarHead");
                        uO.FilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..\\..\\Content\\", uO.FilePath);
						AvatarHeadList.Add(uO);
					}
					else if (type == 2)
					{						
                        UpgradeObject uO = TextFileHelper.GetUpgradeObjectFromTextFile(avaID, "AvatarShoulder");
                        uO.FilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..\\..\\Content\\", uO.FilePath);
                        AvatarShoulderList.Add(uO);
					}
					else if (type == 3)
					{
                        UpgradeObject uO = TextFileHelper.GetUpgradeObjectFromTextFile(avaID, "AvatarChest");
                        uO.FilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..\\..\\Content\\", uO.FilePath);
                        AvatarChestList.Add(uO);
					}
					else
					{
						UpgradeObject uO = TextFileHelper.GetUpgradeObjectFromTextFile(avaID, "Skins");
                        uO.FilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..\\..\\Content\\", uO.FilePath);
                        SkinList.Add(uO);
					}
				}

				AvaHeadListBox.ItemsSource = AvatarHeadList;
				AvaChestListBox.ItemsSource = AvatarChestList;
				AvaShoulderListBox.ItemsSource = AvatarShoulderList;
                SkinListBox.ItemsSource = SkinList;
			}
			else
			{
				this.avatarTabItem.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
					new AvaListSetter(this.SetUpAvaList), avaList);
			}

		}

        //private void SetUpAvatarHead()
        //{
        //    AvatarHeadList.Clear();
        //    AvatarHeadList = TextFileHelper.GetUpgradeObjectListFormattedFilePathFromTextFile("AvatarHead");				
        //    AvaHeadListBox.ItemsSource = AvatarHeadList;
        //}

        //private void SetUpAvatarChest()
        //{
        //    AvatarChestList.Clear();
        //    AvatarChestList = TextFileHelper.GetUpgradeObjectListFormattedFilePathFromTextFile("AvatarChest");			
        //    AvaChestListBox.ItemsSource = AvatarChestList;
        //}

        //private void SetUpAvatarShoulder()
        //{
        //    AvatarShoulderList.Clear();
        //    AvatarShoulderList = TextFileHelper.GetUpgradeObjectListFormattedFilePathFromTextFile("AvatarShoulder");	
        //    AvaShoulderListBox.ItemsSource = AvatarShoulderList;
        //}	
		
		private void doneBtn_Click(object sender, RoutedEventArgs e)
		{			
			screenMan.SaveCharacterInfo();
			screenMan.CloseEditCharacterWindow();
		}

		private void cancelBtn_Click(object sender, RoutedEventArgs e)
		{
			screenMan.ClearTempCharacterInfo();
			screenMan.CloseEditCharacterWindow();
		}

		private void NewTank_Click(object sender, RoutedEventArgs e)
		{
			screenMan.OpenNewTankWindow();
		}

		public void UpdateChar()
		{
			screenMan.SetCharacterInfo();
		}

        //private void HeadHeader_GotFocus(object sender, RoutedEventArgs e)
        //{
        //    if(AvatarHeadList.Count == 0)
        //        SetUpAvatarHead();
        //}		

        //private void ChestHeader_GotFocus(object sender, RoutedEventArgs e)
        //{
        //    if (AvatarChestList.Count == 0)
        //        SetUpAvatarChest();
        //}

        //private void ShoulderHeader_GotFocus(object sender, RoutedEventArgs e)
        //{
        //    if (AvatarShoulderList.Count == 0)
        //        SetUpAvatarShoulder();
        //}

		private void Window_Loaded(object sender, RoutedEventArgs e)
		{
			UpdateChar();
		}
	}
}
